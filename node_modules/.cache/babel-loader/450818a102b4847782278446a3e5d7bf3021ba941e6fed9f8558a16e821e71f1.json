{"ast":null,"code":"var _jsxFileName = \"/Users/ryanlacey/Documents/GitHub/ryans_puzzles/src/components/WordSearchGrid.js\";\nimport React from 'react';\nimport './WordSearchGrid.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordSearchGrid = ({\n  grid,\n  wordPositions\n}) => {\n  const belongsToWord = (x, y) => {\n    for (let i = 0; i < wordPositions.length; i++) {\n      const {\n        startX,\n        startY,\n        endX,\n        endY\n      } = wordPositions[i];\n      if (x >= startX && x <= endX && y === startY + (x - startX) * (endY - startY) / (endX - startX) ||\n      // Horizontal\n      y >= startY && y <= endY && x === startX + (y - startY) * (endX - startX) / (endY - startY) ||\n      // Vertical\n      x >= startX && x <= endX && y >= startY && y <= endY &&\n      // Diagonal\n      (x - startX) / (endX - startX) === (y - startY) / (endY - startY)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid-container\",\n    children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `grid-cell ${belongsToWord(cell.x, cell.y) ? 'word' : ''}`,\n        children: cell.letter\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 25\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n_c = WordSearchGrid;\nexport default WordSearchGrid;\nvar _c;\n$RefreshReg$(_c, \"WordSearchGrid\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","WordSearchGrid","grid","wordPositions","belongsToWord","x","y","i","length","startX","startY","endX","endY","className","children","map","row","rowIndex","cell","colIndex","letter","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ryanlacey/Documents/GitHub/ryans_puzzles/src/components/WordSearchGrid.js"],"sourcesContent":["import React from 'react';\nimport './WordSearchGrid.css';\n\nconst WordSearchGrid = ({ grid, wordPositions }) => {\n    const belongsToWord = (x, y) => {\n        for (let i = 0; i < wordPositions.length; i++) {\n            const { startX, startY, endX, endY } = wordPositions[i];\n            if (\n                (x >= startX && x <= endX && y === startY + ((x - startX) * (endY - startY)) / (endX - startX)) || // Horizontal\n                (y >= startY && y <= endY && x === startX + ((y - startY) * (endX - startX)) / (endY - startY)) || // Vertical\n                (x >= startX && x <= endX && y >= startY && y <= endY && // Diagonal\n                    (x - startX) / (endX - startX) === (y - startY) / (endY - startY))\n            ) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n\n    return (\n        <div className=\"grid-container\">\n            {grid.map((row, rowIndex) => (\n                <div key={rowIndex} className=\"grid-row\">\n                    {row.map((cell, colIndex) => (\n                        <div key={colIndex} className={`grid-cell ${belongsToWord(cell.x, cell.y) ? 'word' : ''}`}>\n                            {cell.letter}\n                        </div>\n                    ))}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default WordSearchGrid;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,cAAc,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAc,CAAC,KAAK;EAChD,MAAMC,aAAa,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAK;IAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,aAAa,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;MAC3C,MAAM;QAAEE,MAAM;QAAEC,MAAM;QAAEC,IAAI;QAAEC;MAAK,CAAC,GAAGT,aAAa,CAACI,CAAC,CAAC;MACvD,IACKF,CAAC,IAAII,MAAM,IAAIJ,CAAC,IAAIM,IAAI,IAAIL,CAAC,KAAKI,MAAM,GAAI,CAACL,CAAC,GAAGI,MAAM,KAAKG,IAAI,GAAGF,MAAM,CAAC,IAAKC,IAAI,GAAGF,MAAM,CAAC;MAAK;MAClGH,CAAC,IAAII,MAAM,IAAIJ,CAAC,IAAIM,IAAI,IAAIP,CAAC,KAAKI,MAAM,GAAI,CAACH,CAAC,GAAGI,MAAM,KAAKC,IAAI,GAAGF,MAAM,CAAC,IAAKG,IAAI,GAAGF,MAAM,CAAE;MAAI;MAClGL,CAAC,IAAII,MAAM,IAAIJ,CAAC,IAAIM,IAAI,IAAIL,CAAC,IAAII,MAAM,IAAIJ,CAAC,IAAIM,IAAI;MAAI;MACrD,CAACP,CAAC,GAAGI,MAAM,KAAKE,IAAI,GAAGF,MAAM,CAAC,KAAK,CAACH,CAAC,GAAGI,MAAM,KAAKE,IAAI,GAAGF,MAAM,CAAE,EACxE;QACE,OAAO,IAAI;MACf;IACJ;IACA,OAAO,KAAK;EAChB,CAAC;EAGD,oBACIV,OAAA;IAAKa,SAAS,EAAC,gBAAgB;IAAAC,QAAA,EAC1BZ,IAAI,CAACa,GAAG,CAAC,CAACC,GAAG,EAAEC,QAAQ,kBACpBjB,OAAA;MAAoBa,SAAS,EAAC,UAAU;MAAAC,QAAA,EACnCE,GAAG,CAACD,GAAG,CAAC,CAACG,IAAI,EAAEC,QAAQ,kBACpBnB,OAAA;QAAoBa,SAAS,EAAG,aAAYT,aAAa,CAACc,IAAI,CAACb,CAAC,EAAEa,IAAI,CAACZ,CAAC,CAAC,GAAG,MAAM,GAAG,EAAG,EAAE;QAAAQ,QAAA,EACrFI,IAAI,CAACE;MAAM,GADND,QAAQ;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEb,CACR;IAAC,GALIP,QAAQ;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMb,CACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACC,EAAA,GA9BIxB,cAAc;AAgCpB,eAAeA,cAAc;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}