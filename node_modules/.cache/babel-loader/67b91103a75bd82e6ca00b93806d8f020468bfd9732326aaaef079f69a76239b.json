{"ast":null,"code":"var _jsxFileName = \"/Users/ryanlacey/Documents/GitHub/ryans_puzzles/src/components/WordSearchGrid.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './WordSearchGrid.css';\nimport WordSearchCell from './WordSearchCell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordSearchGrid = ({\n  grid,\n  wordPositions\n}) => {\n  _s();\n  console.log('grid', grid, 'word positions', wordPositions);\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [foundWordCells, setFoundWordCells] = useState([]);\n  const handleMouseDown = (x, y) => {\n    setIsMouseDown(true);\n    setSelectedCells([{\n      x,\n      y\n    }]);\n  };\n  const handleMouseUp = () => {\n    setIsMouseDown(false);\n    checkSelectedWord();\n    setSelectedCells([]); // Clear selected cells after mouse up\n  };\n  const handleMouseEnter = (x, y) => {\n    if (isMouseDown) {\n      addSelectedCell(x, y);\n    }\n  };\n  const addSelectedCell = (x, y) => {\n    const cellIndex = selectedCells.findIndex(cell => cell.x === x && cell.y === y);\n    if (cellIndex === -1) {\n      setSelectedCells([...selectedCells, {\n        x,\n        y\n      }]);\n    }\n  };\n  const checkSelectedWord = () => {\n    const selectedWord = selectedCells.map(cell => grid[cell.x][cell.y].letter).join('');\n\n    // Convert wordPositions to an array if it's an object\n    const wordPositionsArray = Array.isArray(wordPositions) ? wordPositions : Object.values(wordPositions);\n    const foundWord = wordPositionsArray.find(wordPos => wordPos.word === selectedWord);\n    if (foundWord) {\n      console.log(`Found word: ${selectedWord}`);\n      const foundWordCells = [];\n      wordPositionsArray.forEach(wordPos => {\n        const {\n          startX,\n          startY,\n          endX,\n          endY\n        } = wordPos;\n        for (let x = startX; x <= endX; x++) {\n          for (let y = startY; y <= endY; y++) {\n            if (selectedCells.some(cell => cell.x === x && cell.y === y)) {\n              foundWordCells.push({\n                x,\n                y\n              });\n            }\n          }\n        }\n      });\n      setFoundWordCells(foundWordCells);\n    } else {\n      console.log(`Selected cells do not form a word.`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid-container\",\n    onMouseUp: handleMouseUp,\n    children: Object.keys(grid).map(rowIndex => {\n      const row = grid[rowIndex];\n      if (!Array.isArray(row)) {\n        console.error(`Row ${rowIndex} is not an array.`);\n        return null; // Skip rendering if row is not an array\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: row.map((cell, colIndex) => {\n          const isCellFound = foundWordCells.some(foundCell => foundCell.x === cell.x && foundCell.y === cell.y);\n          const isCellSelected = selectedCells.some(selectedCell => selectedCell.x === cell.x && selectedCell.y === cell.y);\n          const isCellPartOfFoundWord = foundWordCells.some(foundCell => foundCell.x === cell.x && foundCell.y === cell.y);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            onMouseDown: () => handleMouseDown(cell.x, cell.y),\n            onMouseEnter: () => handleMouseEnter(cell.x, cell.y),\n            className: `grid-cell ${isCellFound ? 'found' : ''} ${isCellSelected ? 'highlighted' : ''} ${isCellPartOfFoundWord ? 'part-of-word' : ''}`,\n            children: /*#__PURE__*/_jsxDEV(WordSearchCell, {\n              cell: cell,\n              isSelected: isCellSelected\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 37\n            }, this)\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 33\n          }, this);\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(WordSearchGrid, \"oWgMbwp/L71qP33ZQzufUGNwn6I=\");\n_c = WordSearchGrid;\nexport default WordSearchGrid;\nvar _c;\n$RefreshReg$(_c, \"WordSearchGrid\");","map":{"version":3,"names":["React","useState","WordSearchCell","jsxDEV","_jsxDEV","WordSearchGrid","grid","wordPositions","_s","console","log","selectedCells","setSelectedCells","isMouseDown","setIsMouseDown","foundWordCells","setFoundWordCells","handleMouseDown","x","y","handleMouseUp","checkSelectedWord","handleMouseEnter","addSelectedCell","cellIndex","findIndex","cell","selectedWord","map","letter","join","wordPositionsArray","Array","isArray","Object","values","foundWord","find","wordPos","word","forEach","startX","startY","endX","endY","some","push","className","onMouseUp","children","keys","rowIndex","row","error","colIndex","isCellFound","foundCell","isCellSelected","selectedCell","isCellPartOfFoundWord","onMouseDown","onMouseEnter","isSelected","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ryanlacey/Documents/GitHub/ryans_puzzles/src/components/WordSearchGrid.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './WordSearchGrid.css';\nimport WordSearchCell from './WordSearchCell';\n\nconst WordSearchGrid = ({ grid, wordPositions }) => {\n    console.log('grid', grid, 'word positions', wordPositions);\n    const [selectedCells, setSelectedCells] = useState([]);\n    const [isMouseDown, setIsMouseDown] = useState(false);\n    const [foundWordCells, setFoundWordCells] = useState([]);\n\n    const handleMouseDown = (x, y) => {\n        setIsMouseDown(true);\n        setSelectedCells([{ x, y }]);\n    };\n\n    const handleMouseUp = () => {\n        setIsMouseDown(false);\n        checkSelectedWord();\n        setSelectedCells([]); // Clear selected cells after mouse up\n    };\n\n    const handleMouseEnter = (x, y) => {\n        if (isMouseDown) {\n            addSelectedCell(x, y);\n        }\n    };\n\n    const addSelectedCell = (x, y) => {\n        const cellIndex = selectedCells.findIndex(cell => cell.x === x && cell.y === y);\n        if (cellIndex === -1) {\n            setSelectedCells([...selectedCells, { x, y }]);\n        }\n    };\n\n    const checkSelectedWord = () => {\n        const selectedWord = selectedCells.map(cell => grid[cell.x][cell.y].letter).join('');\n\n        // Convert wordPositions to an array if it's an object\n        const wordPositionsArray = Array.isArray(wordPositions) ? wordPositions : Object.values(wordPositions);\n\n        const foundWord = wordPositionsArray.find(wordPos => wordPos.word === selectedWord);\n        if (foundWord) {\n            console.log(`Found word: ${selectedWord}`);\n            const foundWordCells = [];\n            wordPositionsArray.forEach(wordPos => {\n                const { startX, startY, endX, endY } = wordPos;\n                for (let x = startX; x <= endX; x++) {\n                    for (let y = startY; y <= endY; y++) {\n                        if (selectedCells.some(cell => cell.x === x && cell.y === y)) {\n                            foundWordCells.push({ x, y });\n                        }\n                    }\n                }\n            });\n            setFoundWordCells(foundWordCells);\n        } else {\n            console.log(`Selected cells do not form a word.`);\n        }\n    };\n\n    return (\n        <div className=\"grid-container\" onMouseUp={handleMouseUp}>\n            {Object.keys(grid).map((rowIndex) => {\n                const row = grid[rowIndex];\n                if (!Array.isArray(row)) {\n                    console.error(`Row ${rowIndex} is not an array.`);\n                    return null; // Skip rendering if row is not an array\n                }\n                return (\n                    <div key={rowIndex} className=\"grid-row\">\n                        {row.map((cell, colIndex) => {\n                            const isCellFound = foundWordCells.some(foundCell => foundCell.x === cell.x && foundCell.y === cell.y);\n                            const isCellSelected = selectedCells.some(selectedCell => selectedCell.x === cell.x && selectedCell.y === cell.y);\n                            const isCellPartOfFoundWord = foundWordCells.some(foundCell =>\n                                foundCell.x === cell.x && foundCell.y === cell.y\n                            );\n                            return (\n                                <div\n                                    key={colIndex}\n                                    onMouseDown={() => handleMouseDown(cell.x, cell.y)}\n                                    onMouseEnter={() => handleMouseEnter(cell.x, cell.y)}\n                                    className={`grid-cell ${isCellFound ? 'found' : ''} ${isCellSelected ? 'highlighted' : ''} ${isCellPartOfFoundWord ? 'part-of-word' : ''}`}\n                                >\n                                    <WordSearchCell\n                                        cell={cell}\n                                        isSelected={isCellSelected}\n                                    />\n                                </div>\n                            );\n                        })}\n                    </div>\n                );\n            })}\n        </div>\n    );\n\n};\n\nexport default WordSearchGrid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}