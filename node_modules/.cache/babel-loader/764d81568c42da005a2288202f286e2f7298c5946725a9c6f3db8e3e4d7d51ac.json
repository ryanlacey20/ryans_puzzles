{"ast":null,"code":"var _jsxFileName = \"/Users/ryanlacey/Documents/GitHub/ryans_puzzles/src/components/WordSearchGrid.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './WordSearchGrid.css';\nimport WordSearchCell from './WordSearchCell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordSearchGrid = ({\n  grid,\n  wordPositions\n}) => {\n  _s();\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [foundWordCells, setFoundWordCells] = useState([]);\n  const handleMouseDown = (x, y) => {\n    setSelectedCells([{\n      x,\n      y\n    }]);\n  };\n  const handleMouseUp = () => {\n    checkSelectedWord();\n    setSelectedCells([]); // Clear selected cells after mouse up\n  };\n  const handleMouseEnter = (x, y) => {\n    if (selectedCells.length > 0) {\n      addSelectedCell(x, y);\n    }\n  };\n  const addSelectedCell = (x, y) => {\n    setSelectedCells([...selectedCells, {\n      x,\n      y\n    }]);\n  };\n  const checkSelectedWord = () => {\n    const selectedWord = selectedCells.map(cell => grid[cell.x][cell.y].letter).join('');\n    const foundWord = wordPositions.find(wordPos => wordPos.word === selectedWord);\n    if (foundWord) {\n      console.log(`Found word: ${selectedWord}`);\n      const foundWordCells = [];\n      for (let i = 0; i < wordPositions.length; i++) {\n        const wordPos = wordPositions[i];\n        if (selectedCells.some(cell => cell.x >= wordPos.startX && cell.x <= wordPos.endX && cell.y >= wordPos.startY && cell.y <= wordPos.endY)) {\n          for (let x = wordPos.startX; x <= wordPos.endX; x++) {\n            for (let y = wordPos.startY; y <= wordPos.endY; y++) {\n              foundWordCells.push({\n                x,\n                y\n              });\n            }\n          }\n        }\n      }\n      setFoundWordCells(foundWordCells);\n    } else {\n      console.log(`Selected cells do not form a word.`);\n      setFoundWordCells([]); // Clear found word cells\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid-container\",\n    onMouseUp: handleMouseUp,\n    children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: row.map((cell, colIndex) => {\n        const isCellFound = foundWordCells.some(foundCell => foundCell.x === cell.x && foundCell.y === cell.y);\n        const isCellSelected = selectedCells.some(selectedCell => selectedCell.x === cell.x && selectedCell.y === cell.y);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          onMouseDown: () => handleMouseDown(cell.x, cell.y),\n          onMouseEnter: () => handleMouseEnter(cell.x, cell.y),\n          className: `grid-cell ${isCellFound ? 'found' : ''} ${isCellSelected ? 'highlighted' : ''}`,\n          children: /*#__PURE__*/_jsxDEV(WordSearchCell, {\n            cell: cell,\n            isSelected: isCellSelected\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 33\n          }, this)\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 29\n        }, this);\n      })\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_s(WordSearchGrid, \"IScQDgzZbRtEnUzS3T/3MkOP2qQ=\");\n_c = WordSearchGrid;\nexport default WordSearchGrid;\nvar _c;\n$RefreshReg$(_c, \"WordSearchGrid\");","map":{"version":3,"names":["React","useState","WordSearchCell","jsxDEV","_jsxDEV","WordSearchGrid","grid","wordPositions","_s","selectedCells","setSelectedCells","foundWordCells","setFoundWordCells","handleMouseDown","x","y","handleMouseUp","checkSelectedWord","handleMouseEnter","length","addSelectedCell","selectedWord","map","cell","letter","join","foundWord","find","wordPos","word","console","log","i","some","startX","endX","startY","endY","push","className","onMouseUp","children","row","rowIndex","colIndex","isCellFound","foundCell","isCellSelected","selectedCell","onMouseDown","onMouseEnter","isSelected","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ryanlacey/Documents/GitHub/ryans_puzzles/src/components/WordSearchGrid.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './WordSearchGrid.css';\nimport WordSearchCell from './WordSearchCell';\n\nconst WordSearchGrid = ({ grid, wordPositions }) => {\n    const [selectedCells, setSelectedCells] = useState([]);\n    const [foundWordCells, setFoundWordCells] = useState([]);\n\n    const handleMouseDown = (x, y) => {\n        setSelectedCells([{ x, y }]);\n    };\n\n    const handleMouseUp = () => {\n        checkSelectedWord();\n        setSelectedCells([]); // Clear selected cells after mouse up\n    };\n\n    const handleMouseEnter = (x, y) => {\n        if (selectedCells.length > 0) {\n            addSelectedCell(x, y);\n        }\n    };\n\n    const addSelectedCell = (x, y) => {\n        setSelectedCells([...selectedCells, { x, y }]);\n    };\n\n    const checkSelectedWord = () => {\n        const selectedWord = selectedCells.map(cell => grid[cell.x][cell.y].letter).join('');\n        const foundWord = wordPositions.find(wordPos => wordPos.word === selectedWord);\n        if (foundWord) {\n            console.log(`Found word: ${selectedWord}`);\n            const foundWordCells = [];\n            for (let i = 0; i < wordPositions.length; i++) {\n                const wordPos = wordPositions[i];\n                if (selectedCells.some(cell =>\n                    cell.x >= wordPos.startX && cell.x <= wordPos.endX && cell.y >= wordPos.startY && cell.y <= wordPos.endY\n                )) {\n                    for (let x = wordPos.startX; x <= wordPos.endX; x++) {\n                        for (let y = wordPos.startY; y <= wordPos.endY; y++) {\n                            foundWordCells.push({ x, y });\n                        }\n                    }\n                }\n            }\n            setFoundWordCells(foundWordCells);\n        } else {\n            console.log(`Selected cells do not form a word.`);\n            setFoundWordCells([]); // Clear found word cells\n        }\n    };\n\n    return (\n        <div className=\"grid-container\" onMouseUp={handleMouseUp}>\n            {grid.map((row, rowIndex) => (\n                <div key={rowIndex} className=\"grid-row\">\n                    {row.map((cell, colIndex) => {\n                        const isCellFound = foundWordCells.some(foundCell => foundCell.x === cell.x && foundCell.y === cell.y);\n                        const isCellSelected = selectedCells.some(selectedCell => selectedCell.x === cell.x && selectedCell.y === cell.y);\n                        return (\n                            <div\n                                key={colIndex}\n                                onMouseDown={() => handleMouseDown(cell.x, cell.y)}\n                                onMouseEnter={() => handleMouseEnter(cell.x, cell.y)}\n                                className={`grid-cell ${isCellFound ? 'found' : ''} ${isCellSelected ? 'highlighted' : ''}`}\n                            >\n                                <WordSearchCell\n                                    cell={cell}\n                                    isSelected={isCellSelected}\n                                />\n                            </div>\n                        );\n                    })}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default WordSearchGrid;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,sBAAsB;AAC7B,OAAOC,cAAc,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,cAAc,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAChD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACU,cAAc,EAAEC,iBAAiB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAExD,MAAMY,eAAe,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAK;IAC9BL,gBAAgB,CAAC,CAAC;MAAEI,CAAC;MAAEC;IAAE,CAAC,CAAC,CAAC;EAChC,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;IACxBC,iBAAiB,CAAC,CAAC;IACnBP,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1B,CAAC;EAED,MAAMQ,gBAAgB,GAAGA,CAACJ,CAAC,EAAEC,CAAC,KAAK;IAC/B,IAAIN,aAAa,CAACU,MAAM,GAAG,CAAC,EAAE;MAC1BC,eAAe,CAACN,CAAC,EAAEC,CAAC,CAAC;IACzB;EACJ,CAAC;EAED,MAAMK,eAAe,GAAGA,CAACN,CAAC,EAAEC,CAAC,KAAK;IAC9BL,gBAAgB,CAAC,CAAC,GAAGD,aAAa,EAAE;MAAEK,CAAC;MAAEC;IAAE,CAAC,CAAC,CAAC;EAClD,CAAC;EAED,MAAME,iBAAiB,GAAGA,CAAA,KAAM;IAC5B,MAAMI,YAAY,GAAGZ,aAAa,CAACa,GAAG,CAACC,IAAI,IAAIjB,IAAI,CAACiB,IAAI,CAACT,CAAC,CAAC,CAACS,IAAI,CAACR,CAAC,CAAC,CAACS,MAAM,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;IACpF,MAAMC,SAAS,GAAGnB,aAAa,CAACoB,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACC,IAAI,KAAKR,YAAY,CAAC;IAC9E,IAAIK,SAAS,EAAE;MACXI,OAAO,CAACC,GAAG,CAAE,eAAcV,YAAa,EAAC,CAAC;MAC1C,MAAMV,cAAc,GAAG,EAAE;MACzB,KAAK,IAAIqB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzB,aAAa,CAACY,MAAM,EAAEa,CAAC,EAAE,EAAE;QAC3C,MAAMJ,OAAO,GAAGrB,aAAa,CAACyB,CAAC,CAAC;QAChC,IAAIvB,aAAa,CAACwB,IAAI,CAACV,IAAI,IACvBA,IAAI,CAACT,CAAC,IAAIc,OAAO,CAACM,MAAM,IAAIX,IAAI,CAACT,CAAC,IAAIc,OAAO,CAACO,IAAI,IAAIZ,IAAI,CAACR,CAAC,IAAIa,OAAO,CAACQ,MAAM,IAAIb,IAAI,CAACR,CAAC,IAAIa,OAAO,CAACS,IACxG,CAAC,EAAE;UACC,KAAK,IAAIvB,CAAC,GAAGc,OAAO,CAACM,MAAM,EAAEpB,CAAC,IAAIc,OAAO,CAACO,IAAI,EAAErB,CAAC,EAAE,EAAE;YACjD,KAAK,IAAIC,CAAC,GAAGa,OAAO,CAACQ,MAAM,EAAErB,CAAC,IAAIa,OAAO,CAACS,IAAI,EAAEtB,CAAC,EAAE,EAAE;cACjDJ,cAAc,CAAC2B,IAAI,CAAC;gBAAExB,CAAC;gBAAEC;cAAE,CAAC,CAAC;YACjC;UACJ;QACJ;MACJ;MACAH,iBAAiB,CAACD,cAAc,CAAC;IACrC,CAAC,MAAM;MACHmB,OAAO,CAACC,GAAG,CAAE,oCAAmC,CAAC;MACjDnB,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3B;EACJ,CAAC;EAED,oBACIR,OAAA;IAAKmC,SAAS,EAAC,gBAAgB;IAACC,SAAS,EAAExB,aAAc;IAAAyB,QAAA,EACpDnC,IAAI,CAACgB,GAAG,CAAC,CAACoB,GAAG,EAAEC,QAAQ,kBACpBvC,OAAA;MAAoBmC,SAAS,EAAC,UAAU;MAAAE,QAAA,EACnCC,GAAG,CAACpB,GAAG,CAAC,CAACC,IAAI,EAAEqB,QAAQ,KAAK;QACzB,MAAMC,WAAW,GAAGlC,cAAc,CAACsB,IAAI,CAACa,SAAS,IAAIA,SAAS,CAAChC,CAAC,KAAKS,IAAI,CAACT,CAAC,IAAIgC,SAAS,CAAC/B,CAAC,KAAKQ,IAAI,CAACR,CAAC,CAAC;QACtG,MAAMgC,cAAc,GAAGtC,aAAa,CAACwB,IAAI,CAACe,YAAY,IAAIA,YAAY,CAAClC,CAAC,KAAKS,IAAI,CAACT,CAAC,IAAIkC,YAAY,CAACjC,CAAC,KAAKQ,IAAI,CAACR,CAAC,CAAC;QACjH,oBACIX,OAAA;UAEI6C,WAAW,EAAEA,CAAA,KAAMpC,eAAe,CAACU,IAAI,CAACT,CAAC,EAAES,IAAI,CAACR,CAAC,CAAE;UACnDmC,YAAY,EAAEA,CAAA,KAAMhC,gBAAgB,CAACK,IAAI,CAACT,CAAC,EAAES,IAAI,CAACR,CAAC,CAAE;UACrDwB,SAAS,EAAG,aAAYM,WAAW,GAAG,OAAO,GAAG,EAAG,IAAGE,cAAc,GAAG,aAAa,GAAG,EAAG,EAAE;UAAAN,QAAA,eAE5FrC,OAAA,CAACF,cAAc;YACXqB,IAAI,EAAEA,IAAK;YACX4B,UAAU,EAAEJ;UAAe;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9B;QAAC,GARGX,QAAQ;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OASZ,CAAC;MAEd,CAAC;IAAC,GAjBIZ,QAAQ;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAkBb,CACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAC/C,EAAA,CAzEIH,cAAc;AAAAmD,EAAA,GAAdnD,cAAc;AA2EpB,eAAeA,cAAc;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}