{"ast":null,"code":"var _jsxFileName = \"/Users/ryanlacey/Documents/GitHub/ryans_puzzles/src/components/WordSearchGrid.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './WordSearchGrid.css';\nimport WordSearchCell from './WordSearchCell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordSearchGrid = ({\n  grid,\n  wordPositions\n}) => {\n  _s();\n  const gridContainerRef = useRef(null);\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const addSelectedCell = (x, y) => {\n    // Check if the cell is already selected\n    const cellIndex = selectedCells.findIndex(cell => cell.x === x && cell.y === y);\n    if (cellIndex === -1) {\n      setSelectedCells([...selectedCells, {\n        x,\n        y\n      }]);\n    }\n  };\n  const handleMouseDown = (x, y) => {\n    setIsMouseDown(true);\n    setSelectedCells([{\n      x,\n      y\n    }]);\n  };\n  const handleMouseUp = () => {\n    setIsMouseDown(false);\n    // Check if the selected cells spell out any words\n    checkSelectedWord();\n  };\n  const handleMouseMove = event => {\n    if (isMouseDown) {\n      const mouseX = event.clientX - gridContainer.getBoundingClientRect().left;\n      const mouseY = event.clientY - gridContainer.getBoundingClientRect().top;\n      line.style.left = `${mouseX}px`;\n      line.style.top = `${mouseY}px`;\n      addSelectedCell(cell.x, cell.y);\n    }\n  };\n  const checkSelectedWord = () => {\n    // Create a string from the selected cells\n    const selectedWord = selectedCells.map(cell => grid[cell.x][cell.y].letter).join('');\n    // Check if the selected word matches any of the hidden words\n    const foundWord = wordPositions.find(wordPos => wordPos.word === selectedWord);\n    if (foundWord) {\n      console.log(`Found word: ${selectedWord}`);\n      // Optionally, you can handle what to do when a word is found\n    } else {\n      console.log(`Selected cells do not form a word.`);\n    }\n  };\n  useEffect(() => {\n    const line = document.querySelector('.line');\n    const gridContainer = document.querySelector('.grid-container');\n    const handleMouseMove = event => {\n      if (isMouseDown) {\n        const mouseX = event.clientX - gridContainer.getBoundingClientRect().left;\n        const mouseY = event.clientY - gridContainer.getBoundingClientRect().top;\n        line.style.left = `${mouseX}px`;\n        line.style.top = `${mouseY}px`;\n      }\n    };\n    const handleMouseUp = () => {\n      setIsMouseDown(false);\n    };\n    gridContainer.addEventListener('mousemove', handleMouseMove);\n    gridContainer.addEventListener('mouseup', handleMouseUp);\n    return () => {\n      gridContainer.removeEventListener('mousemove', handleMouseMove);\n      gridContainer.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [isMouseDown]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          onMouseDown: () => handleMouseDown(cell.x, cell.y),\n          onMouseUp: handleMouseUp,\n          onMouseMove: handleMouseMove,\n          children: /*#__PURE__*/_jsxDEV(WordSearchCell, {\n            cell: cell,\n            isSelected: selectedCells.some(selectedCell => selectedCell.x === cell.x && selectedCell.y === cell.y)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 33\n          }, this)\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 29\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n_s(WordSearchGrid, \"aSRV2wekl3QxCngRlHqcvZTpfho=\");\n_c = WordSearchGrid;\nexport default WordSearchGrid;\nvar _c;\n$RefreshReg$(_c, \"WordSearchGrid\");","map":{"version":3,"names":["React","useState","useEffect","useRef","WordSearchCell","jsxDEV","_jsxDEV","WordSearchGrid","grid","wordPositions","_s","gridContainerRef","selectedCells","setSelectedCells","isMouseDown","setIsMouseDown","addSelectedCell","x","y","cellIndex","findIndex","cell","handleMouseDown","handleMouseUp","checkSelectedWord","handleMouseMove","event","mouseX","clientX","gridContainer","getBoundingClientRect","left","mouseY","clientY","top","line","style","selectedWord","map","letter","join","foundWord","find","wordPos","word","console","log","document","querySelector","addEventListener","removeEventListener","children","className","row","rowIndex","colIndex","onMouseDown","onMouseUp","onMouseMove","isSelected","some","selectedCell","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ryanlacey/Documents/GitHub/ryans_puzzles/src/components/WordSearchGrid.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './WordSearchGrid.css';\nimport WordSearchCell from './WordSearchCell';\n\nconst WordSearchGrid = ({ grid, wordPositions }) => {\n    const gridContainerRef = useRef(null);\n\n    const [selectedCells, setSelectedCells] = useState([]);\n    const [isMouseDown, setIsMouseDown] = useState(false);\n\n    const addSelectedCell = (x, y) => {\n        // Check if the cell is already selected\n        const cellIndex = selectedCells.findIndex(cell => cell.x === x && cell.y === y);\n        if (cellIndex === -1) {\n            setSelectedCells([...selectedCells, { x, y }]);\n        }\n    };\n\n    const handleMouseDown = (x, y) => {\n        setIsMouseDown(true);\n        setSelectedCells([{ x, y }]);\n    };\n\n    const handleMouseUp = () => {\n        setIsMouseDown(false);\n        // Check if the selected cells spell out any words\n        checkSelectedWord();\n    };\n\n    const handleMouseMove = (event) => {\n        if (isMouseDown) {\n            const mouseX = event.clientX - gridContainer.getBoundingClientRect().left;\n            const mouseY = event.clientY - gridContainer.getBoundingClientRect().top;\n            line.style.left = `${mouseX}px`;\n            line.style.top = `${mouseY}px`;\n            addSelectedCell(cell.x, cell.y);\n        }\n    };\n\n    const checkSelectedWord = () => {\n        // Create a string from the selected cells\n        const selectedWord = selectedCells.map(cell => grid[cell.x][cell.y].letter).join('');\n        // Check if the selected word matches any of the hidden words\n        const foundWord = wordPositions.find(wordPos => wordPos.word === selectedWord);\n        if (foundWord) {\n            console.log(`Found word: ${selectedWord}`);\n            // Optionally, you can handle what to do when a word is found\n        } else {\n            console.log(`Selected cells do not form a word.`);\n        }\n    };\n\n    useEffect(() => {\n        const line = document.querySelector('.line');\n        const gridContainer = document.querySelector('.grid-container');\n\n        const handleMouseMove = (event) => {\n            if (isMouseDown) {\n                const mouseX = event.clientX - gridContainer.getBoundingClientRect().left;\n                const mouseY = event.clientY - gridContainer.getBoundingClientRect().top;\n                line.style.left = `${mouseX}px`;\n                line.style.top = `${mouseY}px`;\n            }\n        };\n\n        const handleMouseUp = () => {\n            setIsMouseDown(false);\n        };\n\n        gridContainer.addEventListener('mousemove', handleMouseMove);\n        gridContainer.addEventListener('mouseup', handleMouseUp);\n\n        return () => {\n            gridContainer.removeEventListener('mousemove', handleMouseMove);\n            gridContainer.removeEventListener('mouseup', handleMouseUp);\n        };\n    }, [isMouseDown]);\n\n    return (\n        <div>\n            <div className=\"grid-container\">\n                {grid.map((row, rowIndex) => (\n                    <div key={rowIndex} className=\"grid-row\">\n                        {row.map((cell, colIndex) => (\n                            <div\n                                key={colIndex}\n                                onMouseDown={() => handleMouseDown(cell.x, cell.y)}\n                                onMouseUp={handleMouseUp}\n                                onMouseMove={handleMouseMove}\n                            >\n                                <WordSearchCell\n                                    cell={cell}\n                                    isSelected={selectedCells.some(selectedCell => selectedCell.x === cell.x && selectedCell.y === cell.y)}\n                                />\n                            </div>\n                        ))}\n                    </div>\n                ))}\n            </div>\n            <div className=\"line\"></div> {/* Add this line */}\n        </div>\n    );\n};\n\nexport default WordSearchGrid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}