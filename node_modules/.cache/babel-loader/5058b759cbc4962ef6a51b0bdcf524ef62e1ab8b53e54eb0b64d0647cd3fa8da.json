{"ast":null,"code":"var _jsxFileName = \"/Users/ryanlacey/Documents/GitHub/ryans_puzzles/src/components/WordSearchGrid.js\";\n// Import React\nimport React from 'react';\n\n// Define the WordSearchGrid component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordSearchGrid = ({\n  grid,\n  wordPositions\n}) => {\n  console.log(\"wrd positions compnent:\", wordPositions);\n  // Function to check if a letter belongs to a word\n  const belongsToWord = (x, y) => {\n    for (let i = 0; i < wordPositions.length; i++) {\n      const {\n        startX,\n        startY,\n        endX,\n        endY\n      } = wordPositions[i];\n      if (x >= startX && x <= endX && y === startY + (x - startX) * (endY - startY) / (endX - startX) || y >= startY && y <= endY && x === startX + (y - startY) * (endX - startX) / (endY - startY)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // Ensure grid is an array before calling map\n  const rows = Array.isArray(grid) ? grid : Object.values(grid);\n\n  // Render the WordSearchGrid component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid-container\",\n    children: rows.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `grid-cell ${belongsToWord(cell.x, cell.y) ? 'word' : ''}`,\n        children: cell.letter\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 25\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n\n// Export the WordSearchGrid component\n_c = WordSearchGrid;\nexport default WordSearchGrid;\nvar _c;\n$RefreshReg$(_c, \"WordSearchGrid\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","WordSearchGrid","grid","wordPositions","console","log","belongsToWord","x","y","i","length","startX","startY","endX","endY","rows","Array","isArray","Object","values","className","children","map","row","rowIndex","cell","colIndex","letter","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ryanlacey/Documents/GitHub/ryans_puzzles/src/components/WordSearchGrid.js"],"sourcesContent":["// Import React\nimport React from 'react';\n\n// Define the WordSearchGrid component\nconst WordSearchGrid = ({ grid, wordPositions }) => {\n    console.log(\"wrd positions compnent:\", wordPositions)\n    // Function to check if a letter belongs to a word\n    const belongsToWord = (x, y) => {\n        for (let i = 0; i < wordPositions.length; i++) {\n            const { startX, startY, endX, endY } = wordPositions[i];\n            if (\n                (x >= startX && x <= endX && y === startY + ((x - startX) * (endY - startY)) / (endX - startX)) ||\n                (y >= startY && y <= endY && x === startX + ((y - startY) * (endX - startX)) / (endY - startY))\n            ) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    // Ensure grid is an array before calling map\n    const rows = Array.isArray(grid) ? grid : Object.values(grid);\n\n    // Render the WordSearchGrid component\n    return (\n        <div className=\"grid-container\">\n            {/* Map over rows */}\n            {rows.map((row, rowIndex) => (\n                <div key={rowIndex} className=\"grid-row\">\n                    {/* Map over cells */}\n                    {row.map((cell, colIndex) => (\n                        <div\n                            key={colIndex}\n                            className={`grid-cell ${belongsToWord(cell.x, cell.y) ? 'word' : ''}`}\n                        >\n                            {cell.letter}\n                        </div>\n                    ))}\n                </div>\n            ))}\n        </div>\n    );\n};\n\n// Export the WordSearchGrid component\nexport default WordSearchGrid;\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAc,CAAC,KAAK;EAChDC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,aAAa,CAAC;EACrD;EACA,MAAMG,aAAa,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAK;IAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,aAAa,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;MAC3C,MAAM;QAAEE,MAAM;QAAEC,MAAM;QAAEC,IAAI;QAAEC;MAAK,CAAC,GAAGX,aAAa,CAACM,CAAC,CAAC;MACvD,IACKF,CAAC,IAAII,MAAM,IAAIJ,CAAC,IAAIM,IAAI,IAAIL,CAAC,KAAKI,MAAM,GAAI,CAACL,CAAC,GAAGI,MAAM,KAAKG,IAAI,GAAGF,MAAM,CAAC,IAAKC,IAAI,GAAGF,MAAM,CAAC,IAC7FH,CAAC,IAAII,MAAM,IAAIJ,CAAC,IAAIM,IAAI,IAAIP,CAAC,KAAKI,MAAM,GAAI,CAACH,CAAC,GAAGI,MAAM,KAAKC,IAAI,GAAGF,MAAM,CAAC,IAAKG,IAAI,GAAGF,MAAM,CAAE,EACjG;QACE,OAAO,IAAI;MACf;IACJ;IACA,OAAO,KAAK;EAChB,CAAC;;EAED;EACA,MAAMG,IAAI,GAAGC,KAAK,CAACC,OAAO,CAACf,IAAI,CAAC,GAAGA,IAAI,GAAGgB,MAAM,CAACC,MAAM,CAACjB,IAAI,CAAC;;EAE7D;EACA,oBACIF,OAAA;IAAKoB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,EAE1BN,IAAI,CAACO,GAAG,CAAC,CAACC,GAAG,EAAEC,QAAQ,kBACpBxB,OAAA;MAAoBoB,SAAS,EAAC,UAAU;MAAAC,QAAA,EAEnCE,GAAG,CAACD,GAAG,CAAC,CAACG,IAAI,EAAEC,QAAQ,kBACpB1B,OAAA;QAEIoB,SAAS,EAAG,aAAYd,aAAa,CAACmB,IAAI,CAAClB,CAAC,EAAEkB,IAAI,CAACjB,CAAC,CAAC,GAAG,MAAM,GAAG,EAAG,EAAE;QAAAa,QAAA,EAErEI,IAAI,CAACE;MAAM,GAHPD,QAAQ;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIZ,CACR;IAAC,GATIP,QAAQ;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAUb,CACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;;AAED;AAAAC,EAAA,GAxCM/B,cAAc;AAyCpB,eAAeA,cAAc;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}