{"ast":null,"code":"var _jsxFileName = \"/Users/ryanlacey/Documents/GitHub/ryans_puzzles/src/components/WordSearchGrid.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './WordSearchGrid.css';\nimport WordSearchCell from './WordSearchCell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordSearchGrid = ({\n  grid,\n  wordPositions\n}) => {\n  _s();\n  const [selectedCells, setSelectedCells] = useState([]);\n  const toggleCellSelection = (x, y) => {\n    const cellIndex = selectedCells.findIndex(cell => cell.x === x && cell.y === y);\n    if (cellIndex === -1) {\n      setSelectedCells([...selectedCells, {\n        x,\n        y\n      }]);\n    } else {\n      setSelectedCells(selectedCells.filter(cell => cell.x !== x || cell.y !== y));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid-container\",\n    children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => toggleCellSelection(cell.x, cell.y),\n        children: /*#__PURE__*/_jsxDEV(WordSearchCell, {\n          cell: cell,\n          isSelected: selectedCells.some(selectedCell => selectedCell.x === cell.x && selectedCell.y === cell.y)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 29\n        }, this)\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 25\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n_s(WordSearchGrid, \"/9aUuREMg6U4ak1qBjifuQ6JTts=\");\n_c = WordSearchGrid;\nexport default WordSearchGrid;\nvar _c;\n$RefreshReg$(_c, \"WordSearchGrid\");","map":{"version":3,"names":["React","useState","WordSearchCell","jsxDEV","_jsxDEV","WordSearchGrid","grid","wordPositions","_s","selectedCells","setSelectedCells","toggleCellSelection","x","y","cellIndex","findIndex","cell","filter","className","children","map","row","rowIndex","colIndex","onClick","isSelected","some","selectedCell","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ryanlacey/Documents/GitHub/ryans_puzzles/src/components/WordSearchGrid.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './WordSearchGrid.css';\nimport WordSearchCell from './WordSearchCell';\n\nconst WordSearchGrid = ({ grid, wordPositions }) => {\n    const [selectedCells, setSelectedCells] = useState([]);\n\n    const toggleCellSelection = (x, y) => {\n        const cellIndex = selectedCells.findIndex(cell => cell.x === x && cell.y === y);\n        if (cellIndex === -1) {\n            setSelectedCells([...selectedCells, { x, y }]);\n        } else {\n            setSelectedCells(selectedCells.filter(cell => cell.x !== x || cell.y !== y));\n        }\n    };\n\n    return (\n        <div className=\"grid-container\">\n            {grid.map((row, rowIndex) => (\n                <div key={rowIndex} className=\"grid-row\">\n                    {row.map((cell, colIndex) => (\n                        <div key={colIndex} onClick={() => toggleCellSelection(cell.x, cell.y)}>\n                            <WordSearchCell cell={cell} isSelected={selectedCells.some(selectedCell => selectedCell.x === cell.x && selectedCell.y === cell.y)} />\n                        </div>\n                    ))}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default WordSearchGrid;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,sBAAsB;AAC7B,OAAOC,cAAc,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,cAAc,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAChD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMU,mBAAmB,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAK;IAClC,MAAMC,SAAS,GAAGL,aAAa,CAACM,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACJ,CAAC,KAAKA,CAAC,IAAII,IAAI,CAACH,CAAC,KAAKA,CAAC,CAAC;IAC/E,IAAIC,SAAS,KAAK,CAAC,CAAC,EAAE;MAClBJ,gBAAgB,CAAC,CAAC,GAAGD,aAAa,EAAE;QAAEG,CAAC;QAAEC;MAAE,CAAC,CAAC,CAAC;IAClD,CAAC,MAAM;MACHH,gBAAgB,CAACD,aAAa,CAACQ,MAAM,CAACD,IAAI,IAAIA,IAAI,CAACJ,CAAC,KAAKA,CAAC,IAAII,IAAI,CAACH,CAAC,KAAKA,CAAC,CAAC,CAAC;IAChF;EACJ,CAAC;EAED,oBACIT,OAAA;IAAKc,SAAS,EAAC,gBAAgB;IAAAC,QAAA,EAC1Bb,IAAI,CAACc,GAAG,CAAC,CAACC,GAAG,EAAEC,QAAQ,kBACpBlB,OAAA;MAAoBc,SAAS,EAAC,UAAU;MAAAC,QAAA,EACnCE,GAAG,CAACD,GAAG,CAAC,CAACJ,IAAI,EAAEO,QAAQ,kBACpBnB,OAAA;QAAoBoB,OAAO,EAAEA,CAAA,KAAMb,mBAAmB,CAACK,IAAI,CAACJ,CAAC,EAAEI,IAAI,CAACH,CAAC,CAAE;QAAAM,QAAA,eACnEf,OAAA,CAACF,cAAc;UAACc,IAAI,EAAEA,IAAK;UAACS,UAAU,EAAEhB,aAAa,CAACiB,IAAI,CAACC,YAAY,IAAIA,YAAY,CAACf,CAAC,KAAKI,IAAI,CAACJ,CAAC,IAAIe,YAAY,CAACd,CAAC,KAAKG,IAAI,CAACH,CAAC;QAAE;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC,GADhIR,QAAQ;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEb,CACR;IAAC,GALIT,QAAQ;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMb,CACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACvB,EAAA,CAzBIH,cAAc;AAAA2B,EAAA,GAAd3B,cAAc;AA2BpB,eAAeA,cAAc;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}