{"ast":null,"code":"var _jsxFileName = \"/Users/ryanlacey/Documents/GitHub/ryans_puzzles/src/pages/WordSearchPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './WordSearchPage.css';\nimport WordSearchGrid from '../components/WordSearchGrid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordSearchPage = () => {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [wordPositions, setWordPositions] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const fetchGridData = async () => {\n    try {\n      const response = await fetch('http://localhost:4000/api/generate-word-search', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          word1: 'apple3',\n          word2: 'banana3'\n        })\n      });\n      const data = await response.json();\n      const {\n        grid,\n        wordPositions\n      } = data.grid;\n      setGrid(grid);\n      console.log(\"grid dataa:\", grid);\n      console.log(\"wordpositions outisde\", wordPositions);\n      setWordPositions(wordPositions);\n      setIsLoading(false);\n    } catch (error) {\n      console.error('Error fetching grid data:', error);\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchGridData();\n  }, []);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-search-page\",\n      children: /*#__PURE__*/_jsxDEV(WordSearchGrid, {\n        grid: grid,\n        wordPositions: wordPositions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this);\n  }\n};\n_s(WordSearchPage, \"Fck6YlWEeMubVkllwuZ+eIlJs7g=\");\n_c = WordSearchPage;\nexport default WordSearchPage;\nvar _c;\n$RefreshReg$(_c, \"WordSearchPage\");","map":{"version":3,"names":["React","useState","useEffect","WordSearchGrid","jsxDEV","_jsxDEV","WordSearchPage","_s","grid","setGrid","wordPositions","setWordPositions","isLoading","setIsLoading","fetchGridData","response","fetch","method","headers","body","JSON","stringify","word1","word2","data","json","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/ryanlacey/Documents/GitHub/ryans_puzzles/src/pages/WordSearchPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './WordSearchPage.css'\nimport WordSearchGrid from '../components/WordSearchGrid';\n\nconst WordSearchPage = () => {\n    const [grid, setGrid] = useState([]);\n    const [wordPositions, setWordPositions] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n\n\n    const fetchGridData = async () => {\n        try {\n            const response = await fetch('http://localhost:4000/api/generate-word-search', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ word1: 'apple3', word2: 'banana3' }),\n            });\n            const data = await response.json();\n\n            const { grid, wordPositions } = data.grid;\n            setGrid(grid);\n            console.log(\"grid dataa:\", grid)\n            console.log(\"wordpositions outisde\", wordPositions)\n            setWordPositions(wordPositions);\n            setIsLoading(false);\n        } catch (error) {\n            console.error('Error fetching grid data:', error);\n            setIsLoading(false);\n        }\n    };\n\n\n    useEffect(() => {\n        fetchGridData();\n    }, []);\n\n\n    if (isLoading) {\n        return <div>Loading...</div>;\n    } else {\n        return (\n\n            <div className=\"word-search-page\">\n                <WordSearchGrid grid={grid} wordPositions={wordPositions} />\n\n            </div>\n        );\n    }\n\n};\n\nexport default WordSearchPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,sBAAsB;AAC7B,OAAOC,cAAc,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACS,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAGhD,MAAMa,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gDAAgD,EAAE;QAC3EC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,KAAK,EAAE,QAAQ;UAAEC,KAAK,EAAE;QAAU,CAAC;MAC9D,CAAC,CAAC;MACF,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAElC,MAAM;QAAEjB,IAAI;QAAEE;MAAc,CAAC,GAAGc,IAAI,CAAChB,IAAI;MACzCC,OAAO,CAACD,IAAI,CAAC;MACbkB,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEnB,IAAI,CAAC;MAChCkB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEjB,aAAa,CAAC;MACnDC,gBAAgB,CAACD,aAAa,CAAC;MAC/BG,YAAY,CAAC,KAAK,CAAC;IACvB,CAAC,CAAC,OAAOe,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDf,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC;EAGDX,SAAS,CAAC,MAAM;IACZY,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAGN,IAAIF,SAAS,EAAE;IACX,oBAAOP,OAAA;MAAAwB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAChC,CAAC,MAAM;IACH,oBAEI5B,OAAA;MAAK6B,SAAS,EAAC,kBAAkB;MAAAL,QAAA,eAC7BxB,OAAA,CAACF,cAAc;QAACK,IAAI,EAAEA,IAAK;QAACE,aAAa,EAAEA;MAAc;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAE3D,CAAC;EAEd;AAEJ,CAAC;AAAC1B,EAAA,CA/CID,cAAc;AAAA6B,EAAA,GAAd7B,cAAc;AAiDpB,eAAeA,cAAc;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}