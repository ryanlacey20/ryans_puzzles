{"ast":null,"code":"var _jsxFileName = \"/Users/ryanlacey/Documents/GitHub/ryans_puzzles/src/pages/WordSearchPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport WordSearchGrid from '../components/WordSearchGrid'; // Import the WordSearchGrid component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordSearchPage = () => {\n  _s();\n  // Define state to hold the grid and word positions\n  const [grid, setGrid] = useState([]);\n  const [wordPositions, setWordPositions] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Function to fetch the grid data from the server\n  const fetchGridData = async () => {\n    try {\n      const response = await fetch('http://localhost:4000/api/generate-word-search', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          word1: 'apple',\n          word2: 'banana'\n        }) // Adjust as needed\n      });\n      const data = await response.json();\n      // Extract grid and word positions from the response data\n      const {\n        grid,\n        wordPositions\n      } = data;\n      setGrid(grid);\n      setWordPositions(wordPositions);\n      setIsLoading(false); // Set loading state to false after data is received\n    } catch (error) {\n      console.error('Error fetching grid data:', error);\n      setIsLoading(false); // Set loading state to false on error\n    }\n  };\n\n  // Fetch grid data when the component mounts\n  useEffect(() => {\n    fetchGridData();\n  }, []);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 16\n    }, this); // Render a loading indicator while data is being fetched\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"word-search-page\",\n    children: /*#__PURE__*/_jsxDEV(WordSearchGrid, {\n      grid: grid,\n      wordPositions: wordPositions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(WordSearchPage, \"Fck6YlWEeMubVkllwuZ+eIlJs7g=\");\n_c = WordSearchPage;\nexport default WordSearchPage;\nvar _c;\n$RefreshReg$(_c, \"WordSearchPage\");","map":{"version":3,"names":["React","useState","useEffect","WordSearchGrid","jsxDEV","_jsxDEV","WordSearchPage","_s","grid","setGrid","wordPositions","setWordPositions","isLoading","setIsLoading","fetchGridData","response","fetch","method","headers","body","JSON","stringify","word1","word2","data","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/ryanlacey/Documents/GitHub/ryans_puzzles/src/pages/WordSearchPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport WordSearchGrid from '../components/WordSearchGrid'; // Import the WordSearchGrid component\n\nconst WordSearchPage = () => {\n    // Define state to hold the grid and word positions\n    const [grid, setGrid] = useState([]);\n    const [wordPositions, setWordPositions] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n\n    // Function to fetch the grid data from the server\n    const fetchGridData = async () => {\n        try {\n            const response = await fetch('http://localhost:4000/api/generate-word-search', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ word1: 'apple', word2: 'banana' }), // Adjust as needed\n            });\n            const data = await response.json();\n            // Extract grid and word positions from the response data\n            const { grid, wordPositions } = data;\n            setGrid(grid);\n            setWordPositions(wordPositions);\n            setIsLoading(false); // Set loading state to false after data is received\n        } catch (error) {\n            console.error('Error fetching grid data:', error);\n            setIsLoading(false); // Set loading state to false on error\n        }\n    };\n\n    // Fetch grid data when the component mounts\n    useEffect(() => {\n        fetchGridData();\n    }, []);\n\n    if (isLoading) {\n        return <div>Loading...</div>; // Render a loading indicator while data is being fetched\n    }\n\n    return (\n        <div className=\"word-search-page\">\n            {/* Render the WordSearchGrid component with the grid and wordPositions props */}\n            <WordSearchGrid grid={grid} wordPositions={wordPositions} />\n        </div>\n    );\n};\n\nexport default WordSearchPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,cAAc,MAAM,8BAA8B,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACS,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAEhD;EACA,MAAMa,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gDAAgD,EAAE;QAC3EC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,KAAK,EAAE,OAAO;UAAEC,KAAK,EAAE;QAAS,CAAC,CAAC,CAAE;MAC/D,CAAC,CAAC;MACF,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClC;MACA,MAAM;QAAEjB,IAAI;QAAEE;MAAc,CAAC,GAAGc,IAAI;MACpCf,OAAO,CAACD,IAAI,CAAC;MACbG,gBAAgB,CAACD,aAAa,CAAC;MAC/BG,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IACzB,CAAC,CAAC,OAAOa,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDb,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IACzB;EACJ,CAAC;;EAED;EACAX,SAAS,CAAC,MAAM;IACZY,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIF,SAAS,EAAE;IACX,oBAAOP,OAAA;MAAAuB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,CAAC,CAAC;EAClC;EAEA,oBACI3B,OAAA;IAAK4B,SAAS,EAAC,kBAAkB;IAAAL,QAAA,eAE7BvB,OAAA,CAACF,cAAc;MAACK,IAAI,EAAEA,IAAK;MAACE,aAAa,EAAEA;IAAc;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3D,CAAC;AAEd,CAAC;AAACzB,EAAA,CA3CID,cAAc;AAAA4B,EAAA,GAAd5B,cAAc;AA6CpB,eAAeA,cAAc;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}